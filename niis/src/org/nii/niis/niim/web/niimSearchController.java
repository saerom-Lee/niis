/* Generated by Together */

package org.nii.niis.niim.web;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.nii.niis.niim.service.ApplyService;
import org.nii.niis.niim.service.MainService;
import org.nii.niis.niim.service.ParamVO;
import org.nii.niis.niim.service.SearchService;
import org.nii.niis.niim.util.BlackList;
import org.nii.niis.niim.util.PolicyUtil;
import org.nii.niis.niim.util.fancytree.FancyNodeData;
import org.nii.niis.niim.util.fancytree.FancyTreeAirConverter;
import org.nii.niis.niim.util.fancytree.FancyTreeAirLibConverter;
import org.nii.niis.niim.util.fancytree.FancyTreeDemConverter;
import org.nii.niis.niim.util.fancytree.FancyTreeLidConverter;
import org.nii.niis.niim.util.fancytree.FancyTreeNirConverter;
import org.nii.niis.niim.util.fancytree.FancyTreeOrtConverter;
import org.nii.niis.niim.util.fancytree.FancyTreeTdsConverter;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.MultiPolygon;
import com.vividsolutions.jts.geom.Polygon;
import com.vividsolutions.jts.operation.union.CascadedPolygonUnion;

import egovframework.rte.fdl.property.EgovPropertyService;

/**
 * 통합검색 controller 객체
 * @stereotype control 
 */
@Controller
@RequestMapping(value="niimFor")
public class niimSearchController {
	
	@Resource(name="applyService")
    private ApplyService applyService;
	
	@Resource(name="mainService")
    private MainService mainService;
	
	/**
     * 통합검색 interface 객체
     * @directed 
     */
	@Resource(name="niimSearchService")
    private SearchService searchService;
	
	/** EgovPropertyService */
    @Resource(name = "propertiesService")
    protected EgovPropertyService propertyService;
    
    /*@Resource(name="watermarkService")
	private WatermarkService watermarkService;*/
    
    @Resource(name="policyUtil")
    private PolicyUtil policyUtil;
    
	
	/**
	 * 사업지구 리스트 반환
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    
	@RequestMapping(value = "/search/yearList.do")
	public ModelAndView getYearList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		ModelAndView modelAndView = new ModelAndView("jsonView");
				
		List<?> list = searchService.getYearList();
		modelAndView.addObject("list", list);
		
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/zoneCodeList.do")
	public ModelAndView getZoneList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			searParam = getImgTypeParam(imgType, searParam);
			
			List<?> list = searchService.getZoneList(searParam);
//			System.out.println("list : "+list.size());
			modelAndView.addObject("list", list);
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 - 항공사진
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/airImgList.do")
	public ModelAndView getAirImgList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		String zoneCode = "";
		String sigunguCode = "";
		String bounds = "";
		String radius = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
				if (key.equals("bounds")){
					bounds = (String)param.get(key);
					if (bounds.indexOf(",") > -1){
						String[] temp = bounds.split(",");
						//minx, miny, maxx, maxy
						searParam.setXmin(Float.parseFloat(temp[0]));
						searParam.setYmin(Float.parseFloat(temp[1]));
						searParam.setXmax(Float.parseFloat(temp[2]));
						searParam.setYmax(Float.parseFloat(temp[3]));
					}
				}
				if (key.equals("radius")){
					radius = (String)param.get(key);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//항공사진
			//	년도
			//		지구명
			//			코스번호
			//				사진번호
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getAirImgList(searParam);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(searParam.getXmin(), searParam.getYmin(), searParam.getXmax(), searParam.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeAirConverter().getFancyNodeData((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 - 항공사진(해방전후)
	 * @param param
	 * @param request
	 * @param response
	 * @param session
	 * @return
	 * @throws Exception
	 * @since 2017. 8. 23.
	 */
	@RequestMapping(value = "/search/airLibImgFolderList.do")
	public ModelAndView getAirLibImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//항공사진(해방전후)
			//	년도
			//		지구명
			//			코스번호
			//				사진번호
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getAirLibImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeAirLibConverter().getFancyFolderNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/airImgDataList.do")
	public ModelAndView getAirImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getAirImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeAirConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/airImgFolderList.do")
	public ModelAndView getAirImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//항공사진
			//	년도
			//		지구명
			//			코스번호
			//				사진번호
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getAirImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeAirConverter().getFancyFolderNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/airLibImgDataList.do")
	public ModelAndView airLibImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getAirLibImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeAirLibConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 - 항공사진
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/nirImgList.do")
	public ModelAndView getNirImgList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		String zoneCode = "";
		String sigunguCode = "";
		String bounds = "";
		String radius = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
				if (key.equals("bounds")){
					bounds = (String)param.get(key);
					if (bounds.indexOf(",") > -1){
						String[] temp = bounds.split(",");
						//minx, miny, maxx, maxy
						searParam.setXmin(Float.parseFloat(temp[0]));
						searParam.setYmin(Float.parseFloat(temp[1]));
						searParam.setXmax(Float.parseFloat(temp[2]));
						searParam.setYmax(Float.parseFloat(temp[3]));
					}
				}
				if (key.equals("radius")){
					radius = (String)param.get(key);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//항공사진
			//	년도
			//		지구명
			//			코스번호
			//				사진번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getNirImgList(searParam);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(searParam.getXmin(), searParam.getYmin(), searParam.getXmax(), searParam.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeNirConverter().getFancyNodeData((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/nirImgFolderList.do")
	public ModelAndView getNirImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//항공사진
			//	년도
			//		지구명
			//			코스번호
			//				사진번호
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getNirImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeNirConverter().getFancyFolderNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/nirImgDataList.do")
	public ModelAndView getNirImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getNirImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeNirConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 - 정사영상
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/ortImgList.do")
	public ModelAndView getOrtImgList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		String zoneCode = "";
		String sigunguCode = "";
		String bounds = "";
		String radius = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
				if (key.equals("bounds")){
					bounds = (String)param.get(key);
					if (bounds.indexOf(",") > -1){
						String[] temp = bounds.split(",");
						//minx, miny, maxx, maxy
						searParam.setXmin(Float.parseFloat(temp[0]));
						searParam.setYmin(Float.parseFloat(temp[1]));
						searParam.setXmax(Float.parseFloat(temp[2]));
						searParam.setYmax(Float.parseFloat(temp[3]));
					}
				}
				if (key.equals("radius")){
					radius = (String)param.get(key);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//정사영상
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getOrtImgList(searParam);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(searParam.getXmin(), searParam.getYmin(), searParam.getXmax(), searParam.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeOrtConverter().getFancyNodeData((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/ortImgFolderList.do")
	public ModelAndView getOrtImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//정사영상
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getOrtImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeOrtConverter().getFancyFolderNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/ortImgDataList.do")
	public ModelAndView getOrtImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getOrtImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeOrtConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	
	/**
	 * 통합검색 - 수치표고
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/demImgList.do")
	public ModelAndView getDemImgList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		String zoneCode = "";
		String sigunguCode = "";
		String bounds = "";
		String radius = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
				if (key.equals("bounds")){
					bounds = (String)param.get(key);
					if (bounds.indexOf(",") > -1){
						String[] temp = bounds.split(",");
						//minx, miny, maxx, maxy
						searParam.setXmin(Float.parseFloat(temp[0]));
						searParam.setYmin(Float.parseFloat(temp[1]));
						searParam.setXmax(Float.parseFloat(temp[2]));
						searParam.setYmax(Float.parseFloat(temp[3]));
					}
				}
				if (key.equals("radius")){
					radius = (String)param.get(key);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//정사영상
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getDemImgList(searParam);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(searParam.getXmin(), searParam.getYmin(), searParam.getXmax(), searParam.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeDemConverter().getFancyNodeData((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/demImgFolderList.do")
	public ModelAndView getDemImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//정사영상
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getDemImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeDemConverter().getFancyFolderNode((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/demImgDataList.do")
	public ModelAndView getDemImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getDemImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeDemConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	
	/**
	 * 통합검색 - 라이다
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/lidImgList.do")
	public ModelAndView getLidImgList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		String zoneCode = "";
		String sigunguCode = "";
		String bounds = "";
		String radius = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
				if (key.equals("bounds")){
					bounds = (String)param.get(key);
					if (bounds.indexOf(",") > -1){
						String[] temp = bounds.split(",");
						//minx, miny, maxx, maxy
						searParam.setXmin(Float.parseFloat(temp[0]));
						searParam.setYmin(Float.parseFloat(temp[1]));
						searParam.setXmax(Float.parseFloat(temp[2]));
						searParam.setYmax(Float.parseFloat(temp[3]));
					}
				}
				if (key.equals("radius")){
					radius = (String)param.get(key);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//정사영상
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getLidImgList(searParam);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(searParam.getXmin(), searParam.getYmin(), searParam.getXmax(), searParam.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeLidConverter().getFancyNodeData((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/lidImgFolderList.do")
	public ModelAndView getLidImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//정사영상
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getLidImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeLidConverter().getFancyFolderNode((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/lidImgDataList.do")
	public ModelAndView getLidImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {

		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getLidImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeLidConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	
	/**
	 * 통합검색 - 3차원객체
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/tdsImgList.do")
	public ModelAndView getTdsImgList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		String imgType = "";
		String startYear = "";
		String endYear = "";
		String zoneCode = "";
		String sigunguCode = "";
		String bounds = "";
		String radius = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("imgType")){
					imgType = (String)param.get(key);
				}
				if (key.equals("sYear")){
					startYear = (String)param.get(key);
					searParam.setStartYear(startYear);
				}
				if (key.equals("eYear")){
					endYear = (String)param.get(key);
					searParam.setEndYear(endYear);
				}
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
				if (key.equals("bounds")){
					bounds = (String)param.get(key);
					if (bounds.indexOf(",") > -1){
						String[] temp = bounds.split(",");
						//minx, miny, maxx, maxy
						searParam.setXmin(Float.parseFloat(temp[0]));
						searParam.setYmin(Float.parseFloat(temp[1]));
						searParam.setXmax(Float.parseFloat(temp[2]));
						searParam.setYmax(Float.parseFloat(temp[3]));
					}
				}
				if (key.equals("radius")){
					radius = (String)param.get(key);
				}
			}
		}
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//	년도
			//		지구명
			//			도엽번호
			String useAt = (String) session.getAttribute("sUserAuth");
			List<?> list = searchService.getTdsImgList(searParam);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(searParam.getXmin(), searParam.getYmin(), searParam.getXmax(), searParam.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeTdsConverter().getFancyNodeData((List<Map<String, Object>>)list,useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/tdsImgFolderList.do")
	public ModelAndView getTdsImgFolderList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
//			searParam.setImgType(getImgTypeParam(imgType));
			//tree 구조 
			//	년도
			//		지구명
			//			도엽번호
			//				주소지
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getTdsImgFolderList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeTdsConverter().getFancyFolderNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/tdsImgDataList.do")
	public ModelAndView getTdsImgDataList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			String useAt = (String) session.getAttribute("sUserAuth");			
			List<?> list = searchService.getTdsImgDataList(vo);
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			List<FancyNodeData> treeList = new FancyTreeTdsConverter().getFancyDataNode((List<Map<String, Object>>)list, useAt);
			modelAndView.addObject("result", treeList);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}
	
	
	/**
	 * 최신 항공사진 측량 경계 조회
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/nowestAirZoneAreaGeometry.do")
	public void getNowestAirZoneAreaGeometry(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		byte[] resBytes = null;
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		String zoneCode = "";
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("zoneCode")){
					zoneCode = (String)param.get(key);
					searParam.setZoneCode(zoneCode);
				}
			}
		}
		
		try {
			resBytes = this.getZoneAreaGeometry(searParam);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
        if(resBytes == null){
            return;
        }
        
        OutputStream os = null;
		try{
	        int iLength = resBytes.length;
	        response.setContentLength(iLength);
	        os = response.getOutputStream();
	        response.setContentType("text/xml; charset=UTF-8");
	        os.write(resBytes);
	        os.flush();
	        os.close();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			if(null != os){
				os.close();
			}
		}
	}
	
	private byte[] getZoneAreaGeometry(ParamVO searParam){
		byte[] resBytes = null;
		List<?> bndry = null;
		List<Geometry> geometries=new ArrayList<Geometry>();
		
		try{
			bndry = searchService.getNowestAirZoneAreaGeometry(searParam);
			
			if (bndry != null){
                for (int i = 0; i < bndry.size(); i++){
                	Map<String, Object> info = (Map<String, Object>) bndry.get(i);                	
    				BigDecimal bdXmin = new BigDecimal(info.get("xmin").toString());
    				BigDecimal bdYmin = new BigDecimal(info.get("ymin").toString());
    				BigDecimal bdXmax = new BigDecimal(info.get("xmax").toString());
    				BigDecimal bdYmax = new BigDecimal(info.get("ymax").toString());
    				
    				Geometry geometry = (Geometry) searchService.createEnvelopeToGeometry(bdXmin.doubleValue(), bdYmin.doubleValue(), bdXmax.doubleValue(), bdYmax.doubleValue());
    				geometries.add(geometry);
                }
                Geometry geom = zoneAreaUnion(geometries);
                resBytes = getXML(geom);
			}
		}catch (Exception e){
			System.out.println(e.getMessage());
		} 
		return resBytes; 
	}
	
	private Geometry zoneAreaUnion(List<Geometry> polys){
		CascadedPolygonUnion nGeom = new CascadedPolygonUnion(polys);
		return nGeom.union();
	}
	
    private byte[] getXML(Geometry geom){
    	StringBuffer kmlBuffer = new StringBuffer();
        kmlBuffer.append("<?xml version='1.0' encoding='UTF-8'?>\n");  
        kmlBuffer.append("<Document>");
        
        kmlBuffer.append(this.getGeometryXML(geom));        
        
        kmlBuffer.append("</Document>");   
//		System.out.println("------------------------------------------");
//		System.out.println(kmlBuffer.toString());
//		System.out.println("------------------------------------------");
        byte[] resBytes = null;
        try{
        	resBytes = kmlBuffer.toString().getBytes("UTF-8");
        }catch(Exception e){
        	System.out.println(e.getMessage());
        }
		return resBytes;
	}
	
	private String getGeometryXML(Geometry geom) {
		StringBuffer geomBuffer = new StringBuffer();
		if (geom != null){
//			for (int i = 0; i < this.list.size(); i++){
//				AddressSearchVO vo = (AddressSearchVO)this.list.get(i);
				if (geom instanceof MultiPolygon){
					geomBuffer.append("<MultiGeometry>");
					MultiPolygon mpoly = (MultiPolygon)geom;
			        for (int j = 0; j < mpoly.getNumGeometries(); j++) {
			        	Polygon polygon = (Polygon) mpoly.getGeometryN(j);
			        	geomBuffer.append("<Polygon>");
			        	geomBuffer.append(this.getGeomPolygonPlacemark(j, polygon));
			        	geomBuffer.append("</Polygon>");
			        }
			        geomBuffer.append("</MultiGeometry>");
				}else{
					Polygon polygon = (Polygon) geom;
					geomBuffer.append("<Polygon>");
					geomBuffer.append("<extrude>1</extrude><tessellate>1</tessellate><altitudeMode>absolute</altitudeMode>");
					geomBuffer.append(this.getGeomPolygonPlacemark(0, polygon));
					geomBuffer.append("</Polygon>");
				}
//			}
		}

		return geomBuffer.toString();
	}
    
	public String getGeomPolygonPlacemark(int id, Polygon obj)
	{		
		StringBuffer dta = new StringBuffer();
		Polygon poly = null;
		
		Coordinate[] points = null;
		
		if (obj != null)
		{
			dta.append("<outerBoundaryIs><LinearRing><coordinates>");
			
			poly =  (Polygon) obj;
			points = poly.getExteriorRing().getCoordinates();
			
	        if(points.length>0)
	        {	        	
	            for (int j = 0; j < points.length; j++)
	            {
	            	Coordinate point = (Coordinate) points[j];
	            	double x = point.x;
	                double y = point.y;
	                if (j == (points.length-1)){
	                	dta.append(x+","+y);
	                }else{
	                	dta.append(x+","+y+" ");
	                }
	            }
	        }
	        dta.append("</coordinates></LinearRing></outerBoundaryIs>");
		}
		return dta.toString();
	}
	
	/**
	 * 최근 연도 사업지구 검색
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/nowestAirZone.do")
	public ModelAndView getNowestAirZone(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		ParamVO searParam = new ParamVO();
		searParam.setKeyword(param.get("zoneYy") == null ? "" : (String)param.get("zoneYy"));
		ModelAndView modelAndView = new ModelAndView("jsonView");
		try {
			List<?> list = searchService.getNowestAirZone(searParam);	
			modelAndView.addObject("result", list);	
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}

	
	/**
	 * 통합검색 지번 검색
	 * @param imgType
	 * @return
	 */
	@RequestMapping(value = "/search/getZipCodeList.do")
	public ModelAndView getZipCodeList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String sigunguCode = "";
		String mntnYn = "";
		String lnbrMnnm = "";
		String lnbrSlno = "";
		String emdCd = "";
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("mntnYn")){
					mntnYn = (String)param.get(key);
					searParam.setMntnYn(mntnYn);
				}
				if (key.equals("lnbrMnnm")){
					lnbrMnnm = (String)param.get(key);
					searParam.setLnbrMnnm(lnbrMnnm);
				}
				if (key.equals("lnbrSlno")){
					lnbrSlno = (String)param.get(key);
					searParam.setLnbrSlno(lnbrSlno);
				}
				if (key.equals("emdCd")){
					emdCd = (String)param.get(key);
					searParam.setEmdCd(emdCd);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
			}
		}
		
		try {
			List<?> list = searchService.getZipCodeList(searParam);	
			modelAndView.addObject("result", list);	
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 지번 검색
	 * @param imgType
	 * @return
	 */
	@RequestMapping(value = "/search/getJusoList.do")
	public ModelAndView getJusoList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String sigunguCode = "";
		
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
			}
		}
		
		try {
			List<?> list = searchService.getJusoList(searParam);	
			modelAndView.addObject("result", list);	
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 건물번호 검색
	 * @param imgType
	 * @return
	 */
	@RequestMapping(value = "/search/getBuldNoList.do")
	public ModelAndView getBuldNoList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String sigunguCode = "";
		String lnbrMnnm = "";
		String lnbrSlno = "";
		String rnCd = "";
		ParamVO searParam = new ParamVO();
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next(); 
				
				if (key.equals("lnbrMnnm")){
					lnbrMnnm = (String)param.get(key);
					searParam.setLnbrMnnm(lnbrMnnm);
				}
				if (key.equals("lnbrSlno")){
					lnbrSlno = (String)param.get(key);
					searParam.setLnbrSlno(lnbrSlno);
				}
				if (key.equals("rnCd")){
					rnCd = (String)param.get(key);
					searParam.setRnCd(rnCd);
				}
				if (key.equals("sigunguCode")){
					sigunguCode = (String)param.get(key);
					if (!sigunguCode.equals("00")){
						searParam.setSigunguCode(sigunguCode);
					}
				}
			}
		}
		
		try {
			List<?> list = searchService.getBuldNoList(searParam);	
			modelAndView.addObject("result", list);	
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	/**
	 * 통합검색 영상 타입 파라미터 생성
	 * @param imgType
	 * @return
	 */
    private ParamVO getImgTypeParam(String imgType, ParamVO param){
    	String tempImgType = "";
    	
		String[] temp = null;
		if (imgType != null){
			if (imgType.indexOf(",") < 0){
				temp = new String[1];
				temp[0] = imgType;
			}else{
				String[] tempImg = imgType.split(",");
				temp = new String[tempImg.length];
				for (int i = 0; i < tempImg.length; i++){
					temp[i] = tempImg[i];
				}
			}
			
			for (int j = 0; j < temp.length; j++){
				if (temp[j].equals("2")){
					if (tempImgType.indexOf(propertyService.getString("Globals.demImageCode")) < 0){
						tempImgType += "'"+propertyService.getString("Globals.demImageCode")+"',";
						param.setDemImgType(propertyService.getString("Globals.demImageCode"));
					}
				} else if (temp[j].equals("1")){
					if (tempImgType.indexOf(propertyService.getString("Globals.ortImageCode")) < 0){
						tempImgType += "'"+propertyService.getString("Globals.ortImageCode")+"',";
						param.setOrtImgType(propertyService.getString("Globals.ortImageCode"));
					}
				} else if (temp[j].equals("0")){
					if (tempImgType.indexOf(propertyService.getString("Globals.airImageCode")) < 0){
						param.setAirImgType(propertyService.getString("Globals.airImageCode"));
						tempImgType += "'"+propertyService.getString("Globals.airLibImageCode")+"',"; //항공사진(해방전후)
						param.setAirTargetName("항공사진이미지");
					}
				} else if (temp[j].equals("3")){
					param.setAtImgType("atCde");
				}
				
				if (j == (temp.length - 1)){
					if (tempImgType.indexOf(",") > 0){
						tempImgType = tempImgType.substring(0, tempImgType.length()-1);
					}
					param.setImgType(tempImgType);
				}
			}
		}
    	return param;
    }
    
	/**
	 * 통합검색 - 신청서목록
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/search/applicationList.do")
	public ModelAndView applicationList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		List<?> applicationList = null;
				
		applicationList = searchService.getApplicationList();
		
		modelAndView.addObject("list", applicationList);
		
		return modelAndView;
		
	}
	
	/**
	 * 통합검색 - 신청 내역 등록 및 워터마크 인덱스 생성
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	/*@RequestMapping(value = "/search/createAirIndex.do")
	public ModelAndView createAirIndex(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try{
			String today = new SimpleDateFormat("yyyyMMdd").format(Calendar.getInstance().getTime());
			
			ArrayList<String> fileType = new ArrayList<String>();
			ArrayList<String> zoneCode = new ArrayList<String>();
			ArrayList<String> pathOne  = new ArrayList<String>();
			ArrayList<String> pathTwo  = new ArrayList<String>();
			ArrayList<String> fileName = new ArrayList<String>();
			
			Collections.addAll(fileType	, request.getParameterValues("fileType[]"));
			Collections.addAll(zoneCode	, request.getParameterValues("zoneCode[]"));
			Collections.addAll(pathOne	, request.getParameterValues("pathOne[]"));
			Collections.addAll(pathTwo	, request.getParameterValues("pathTwo[]"));
			Collections.addAll(fileName	, request.getParameterValues("fileName[]"));
			
			param.put("fileType"	, fileType);
			param.put("zoneCode"	, zoneCode);
			param.put("pathOne"		, pathOne);
			param.put("pathTwo"		, pathTwo);
			param.put("fileName"	, fileName);
			
			//추가
			param.put("useAt"		, (String) session.getAttribute("sUserAuth"));
			
			//신청서 업데이트 항목 추가
			param.put("lastChangeUsr", session.getAttribute("sUserMgno"));
			param.put("supDate", today);
			param.put("conName", session.getAttribute("sUserNm"));
			
			
			//if(!mainService.isThreadRunning("managementTaskExecutor")){
			if(!mainService.isThreadRunning("taskExecutor")){
				
				policyUtil.addPolicy(request, param);
				
				Map<String, Object> returnMap = searchService.regSupplyItem(param);
				
				returnMap.put("waterMarkWeight", param.get("waterMarkWeight"));
				returnMap.put("userPath", param.get("userPath"));
				returnMap.put("CKNBLibraryPath", propertyService.getString("Globals.CKNBLibraryPth"));
				//searchService.createXML(returnMap);
				
				watermarkService.managementImgDownload(returnMap);
				
				modelAndView.addObject("supIdn", returnMap.get("supIdn"));
				modelAndView.addObject("state", "1");
			}else{
				modelAndView.addObject("state", "2");
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return modelAndView;
	}
	*/
	
	/**
	 * 통합검색 - 다운로드 XML 생성
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@Deprecated
	@RequestMapping(value = "/search/createXML.do")
	public void createXML(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		try {
		String[] markIndex = request.getParameterValues("markIndex[]");
		String[] filepath = request.getParameterValues("filepath[]");
		String waterMarkWeight = request.getParameter("waterMarkWeight");
		String[] fileType = request.getParameterValues("fileType[]");
		String[] metaPath = request.getParameterValues("metaPath[]");
		
		//test filepath
//		sampleFilePath.add("D:\\nii\\sample\\ortho\\37702001.tif");
//		sampleFilePath.add("D:\\nii\\sample\\ortho\\37702001s.tif");
//		sampleFilePath.add("D:\\nii\\sample\\ortho\\37702002.tif");
//		sampleFilePath.add("D:\\nii\\sample\\ortho\\37702002s.tif");
		
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = null;
		try {
			docBuilder = docFactory.newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}

		Document doc = docBuilder.newDocument();
		Element rootElement = doc.createElement("imglist");
		doc.appendChild(rootElement);
		
		Element image = doc.createElement("image");
		rootElement.appendChild(image);
		
		for (int i = 0; i < markIndex.length; i++) {

			Element staff = doc.createElement("file");
			image.appendChild(staff);
			staff.setAttribute("ssn", Integer.toString(i));

			Element index = doc.createElement("index");
			index.appendChild(doc.createTextNode(markIndex[i]));
			staff.appendChild(index);

			Element filename = doc.createElement("filename");
			filename.appendChild(doc.createTextNode(filepath[i]));
			staff.appendChild(filename);
			
			Element weight = doc.createElement("weight");
			weight.appendChild(doc.createTextNode(waterMarkWeight));
			staff.appendChild(weight);
			
			Element filetype = doc.createElement("filetype");
			filetype.appendChild(doc.createTextNode(fileType[i]));
			staff.appendChild(filetype);
			
		}
		
		if ( metaPath.length > 0){
			Element meta = doc.createElement("meta");
			rootElement.appendChild(meta);
		
			for (int i = 0; i < metaPath.length; i++) {
					
				Element staff = doc.createElement("file");
				meta.appendChild(staff);
				staff.setAttribute("ssn", Integer.toString(i));
				
				Element filename = doc.createElement("filename");
				filename.appendChild(doc.createTextNode(metaPath[i]));
				staff.appendChild(filename);
			}
		}System.out.println("metaPath.length:::::::::::::::::::::::::" + metaPath.length);
		/**
		 * metaPath 이용 xml 생성
		 * .../air/meta/db_meta​_air​/(year)/(zone_code)/air_product_dts.xls
		 * ​.../air/meta/db_meta​_air​/(year)/(zone_code)/air_producteo_dts.xls​
		 * .../air/meta/db_meta​_air​/(year)/(zone_code)/air_orientmap_dts.xls​
		 * .../air/meta/db_meta​_air​/(year)/(zone_code)/air_basemeta_dts.xls​
		 * .../air/meta/db_meta​_air​/(year)/(zone_code)/meta_airmap_mait.xls​
		 *
ex)
<meta>
	<file ssn="0">
		<filename>F:\AIR\META\DB_META​_AIR​\2014\201C\air_product_dts.xls</filename>
		<filename>F:\AIR\META\DB_META​_AIR​\2014\201C\air_producteo_dts.xls</filename>
		<filename>F:\AIR\META\DB_META​_AIR​\2014\201C\air_orientmap_dts.xls</filename>
	</file>
	<file ssn="1">
		<filename>F:\AIR\META\DB_META​_AIR​\2014\201D\air_product_dts.xls</filename>
		<filename>F:\AIR\META\DB_META​_AIR​\2014\201D\air_producteo_dts.xls</filename>
		<filename>F:\AIR\META\DB_META​_AIR​\2014\201D\air_orientmap_dts.xls</filename>
	</file>
</mete>

		 */

		StringWriter sw = new StringWriter();
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = null;

		try {
			transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");

			DOMSource source = new DOMSource(doc);
			StreamResult result;
			try {
				result = new StreamResult(new FileOutputStream(new File("C:\\nii\\embedding.xml")));
				try {
					transformer.transform(source, result);
				} catch (TransformerException e) {
					e.printStackTrace();
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}

			System.out.println("File saved!");

		} catch (TransformerConfigurationException e1) {
			e1.printStackTrace();
		}
		}catch (Exception e1) {
			e1.printStackTrace();
		}
	}
	
	/**
	 * 통합검색 - 1:50000 도엽 검색
	 * @param param
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("rawtypes")
	@RequestMapping(value = "/search/selectIndexMapName.do")
	public ModelAndView selectIndexMapName(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		String selectKey = (String) param.get("selectKey");
		List<?> IndexMapName = new ArrayList();
		//1:50000일때
		if(selectKey.equals("50000")){
			IndexMapName = searchService.getIndexMapName();
		}
		modelAndView.addObject("IndexMapName", IndexMapName);
		
		return modelAndView;
		
	}
	
	@RequestMapping(value = "/search/searchPOI.do")
	public ModelAndView searchPOI(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String keyword = "";
		ModelAndView modelAndView = new ModelAndView("jsonView");
		ParamVO searParam = new ParamVO();
		
		if (param != null){
			Iterator<String> iter = param.keySet().iterator();
			while(iter.hasNext()){ 
				String key = (String)iter.next();
				if (key.equals("keyword")){
					// 보안 코딩
					keyword = BlackList.getStrCnvrXss((String)param.get(key));
					searParam.setKeyword(keyword);
				}
			}
		}
		
		try 
		{
			List<?> list = searchService.getPOIList(searParam);
			modelAndView.addObject("list", list);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}	
		return modelAndView;
	}
	
	@RequestMapping(value = "/search/getImgMarkerList.do")
	public ModelAndView getImgMarkerList(@RequestParam Map<String, Object> param, HttpServletRequest request, HttpServletResponse response, HttpSession session) throws Exception {
		
		String radius = "";
		String state = "";
		
		ParamVO vo = searchService.getBeforeSearchCondtion(param);
		
		//policyUtil.addPolicy(request, vo);
		
//		if (param.containsKey("radius")){
//			radius = (String)param.get("radius");
//		}
		if (param.containsKey("state")){
			state = (String)param.get("state");
		}
		
		ModelAndView modelAndView = new ModelAndView("jsonView");
		
		try {
			List<?> list = null;
			if("0".equals(state)){
				list = searchService.getAirImgDataList(vo);
			}else if("1".equals(state)){
				list = searchService.getOrtImgDataList(vo);
			}else if("2".equals(state)){
				list = searchService.getDemImgDataList(vo);
			}else if("3".equals(state)){
				list = searchService.getLidImgDataList(vo);
			}else if("4".equals(state)){
				list = searchService.getNirImgDataList(vo);
			}else if("5".equals(state)){
				list = searchService.getTdsImgDataList(vo);
			}
			
			if (!radius.equals("")){
				if (list != null){
					list = searchService.getContainsList(vo.getXmin(), vo.getYmin(), vo.getXmax(), vo.getYmax(), list, radius);
				}
			}
			
			modelAndView.addObject("result", list);	
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
		return modelAndView;
	}	
}
