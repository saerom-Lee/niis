/* Generated by Together */

package org.nii.niis.niim.service.impl;


import java.util.List;
import java.util.Map;

import org.nii.niis.niim.service.ManagementServiceVO;
import org.springframework.stereotype.Repository;

import egovframework.rte.psl.dataaccess.EgovAbstractDAO;

/**
 * 메인 DAO 객체
 */
@Repository("managementDAO")
public class ManagementDAO extends EgovAbstractDAO {

	/**
	 * 통합관리 - 사업지구 관리/사업종류 조회
	 * @param maParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectZoneType() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getZoneType");
	}

	/**
	 * 통합관리 - 사업지구 관리/사업지구 목록 조회 페이징 카운트
	 * @param maParam
	 * @return int
	 * @throws Exception
	 */
	public int selectZoneListCnt(ManagementServiceVO maParam) {
		return (Integer)selectByPk("managementDAO.getZoneListCnt", maParam);
	}
	
	/**
	 * 통합관리 - 사업지구 관리/사업지구 목록 조회
	 * @param maParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectZoneList(ManagementServiceVO maParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getZoneList", maParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/사업지구 상세 목록 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> getsubResultZoneList(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getsubResultZoneList", zoneCode);
	}
	/**
	 * 통합관리 - 항공사진 관리/항공사진 사업연도 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectYearListAir() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectYearListAir");
	}
	/**
	 * 통합관리 - 항공사진 관리/항공사진 사업지구명(연도별) 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectZoneNamAir(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamAir", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/항공사진 코스번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectPhCourseAir(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhCourseAir", zoneCode);
	}
	/**
	 * 통합관리 - 항공사진 관리/항공사진 사진번호 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectPhNumAir(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhNumAir", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 목록 조회 페이징 카운트
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int selectOrientmapListCnt(Map<String, Object> airParam) {
		return (Integer)selectByPk("managementDAO.selectOrientmapListCnt", airParam);
	}	
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 목록 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectOrientmapList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectOrientmapList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 상세 목록 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectSubOrientmapList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubOrientmapList", airParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/사업지구 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public int updateAdjustZone(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustZone", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public int updateAdjustOrientmap(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustOrientmap", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 보안등급  조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectSecurityCode() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSecurityCode");
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 카메라 구분 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectCameraCode() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectCameraCode");
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 해상도 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectResolutionAir(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectResolutionAir", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 목록 조회 페이징 카운트
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int selectProductAirListCnt(Map<String, Object> airParam) {
		return (Integer)selectByPk("managementDAO.selectProductAirListCnt", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 목록 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectProductAirList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectProductAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 상세 목록 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubProductAirList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubProductAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 상세 목록 조회(외부표정요소)
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubProductEOAirList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubProductEOAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 상세 목록 조회(메타데이터)
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubMetaAirList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubMetaAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 수정(획득정보)
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustMetaAirmapAcqut(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustMetaAirmapAcqut", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustAirOrientmapDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirOrientmapDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 수정(제약정보)
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustMetaAirmapContr(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustMetaAirmapContr", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 수정(축척)
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustAirZoneDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirZoneDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 수정(메타데이터)
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustAirBasemetaDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirBasemetaDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/항공사진 성과 상세 목록 수정(식별정보)
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustMetaAirmapIdent(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustMetaAirmapIdent", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 목록 조회 페이징 카운트
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int selectAirNoteListCnt(Map<String, Object> airParam) {
		return (Integer)selectByPk("managementDAO.selectAirNoteListCnt", airParam);
	}	
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 목록 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectAirNoteList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectAirNoteList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 관리 필름 번호 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectFilmNumAir(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectFilmNumAir", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 상세 목록
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubAirNoteList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubAirNoteList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustAirNoteDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirNoteDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustAirCoursetestDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirCoursetestDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustAirNotecourseDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirNotecourseDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 카메라구분
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectAirCameraDts() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectAirCameraDts");
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 보유업체 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectAirkeepCmpn() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectAirkeepCmpn");
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 목록 조회 페이징 카운트
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int selectAirCameraDtsListCnt(Map<String, Object> airParam) {
		return (Integer)selectByPk("managementDAO.selectAirCameraDtsListCnt", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 목록 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectAirCameraDtsList(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectAirCameraDtsList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustAirCameraDts(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustAirCameraDts", airParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 사업연도 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectYearDEMList() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectYearDEMList");
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 사업지구명 조회
	 * @param demParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectZoneNamDEM(Map<String, Object> demParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamDEM", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 도엽번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> getMap5000Num(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getMap5000Num", zoneCode);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 보안등급 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectSecurityCodeDEM() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSecurityCode");
	}	
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 해상도 조회
	 * @return List
	 * @throws Exception
	 */
//	@SuppressWarnings({ "deprecation", "unchecked" })
//	public List<?> selectResolutionDEM(Map<String, Object> demParam) {
//		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectResolution", demParam);
//	}	
	
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 격자간격 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectGridIntDem(Map<String, Object> demParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectGridIntDem", demParam);
	}	
	
	/**
	 * 통합관리 - 항공사진 관리/성과관리 수정
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustProductAirList(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustProductAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과관리 수정(외부표정요소)
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustProductEOAirList(Map<String, Object> airParam) {
		return update("managementDAO.updateAdjustProductEOAirList", airParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 목록 조회 페이징 카운트
	 * @param demParam
	 * @return int
	 * @throws Exception
	 */
	public int getMap5000NumListCnt(Map<String, Object> demParam) {
		return (Integer)selectByPk("managementDAO.getMap5000NumListCnt", demParam);
	}	
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 목록 조회
	 * @param demParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getMap5000NumList(Map<String, Object> demParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getMap5000NumList", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 조회
	 * @param demParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubMap5000NumList(Map<String, Object> demParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSubMap5000NumList", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/격자간격 등록 중복검사
	 * @param demParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubGridIntDem(Map<String, Object> demParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSubGridIntDem", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 조회(메타데이터)
	 * @param demParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubMap5000BaseMeta(Map<String, Object> demParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSubMap5000BaseMeta", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 수정(메타데이터)
	 * @param demParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMap5000BaseMeta(Map<String, Object> demParam) {
		return update("managementDAO.updateAdjustSubMap5000BaseMeta", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 수정
	 * @param demParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMap5000NumList(Map<String, Object> demParam) {
		update("managementDAO.updateAdjustGridIntList", demParam);
		return update("managementDAO.updateAdjustSubMap5000NumList", demParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 사업연도 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> getYearListOrt() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectYearListOrt");
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 사업지구명 조회
	 * @param ortParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getZoneNamOrt(Map<String, Object> ortParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamOrt", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 도엽번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> getMap5000NumOrt(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getMap5000NumOrt", zoneCode);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 보안등급 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectSecurityCodeOrt() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSecurityCode");
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 지상표본거리 조회
	 * @return List
	 * @throws Exception
	 */	
	@SuppressWarnings("deprecation")
	public List<?> selectGtypDstOrt() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectGtypDstOrt");
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 지상표본거리 조회
	 * @return List
	 * @throws Exception
	 */	
	@SuppressWarnings("deprecation")
	public List<?> selectSubGtypDstOrt() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubGtypDstOrt");
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 지상표본거리 조회
	 * @return List
	 * @throws Exception
	 */	
	@SuppressWarnings("deprecation")
	public List<?> selectResSeqOrt() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectResSeqOrt");
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 목록 조회 페이징 카운트
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int getMap5000NumOrtListCnt(Map<String, Object> ortParam) {
		return (Integer)selectByPk("managementDAO.getMap5000NumOrtListCnt", ortParam);
	}	
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 목록 조회
	 * @param ortParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getMap5000NumOrtList(Map<String, Object> ortParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getMap5000NumOrtList", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 상세 목록 조회
	 * @param ortParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubMap5000NumOrtList(Map<String, Object> ortParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSubMap5000NumOrtList", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 상세 목록 조회
	 * @param ortParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubGtypDstOrt(Map<String, Object> ortParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSubGtypDstOrt", ortParam);
	}
	/**
	 * 통합관리 -  정사영상 관리/해상도 입력 지상표본거리 조회
	 * @param ortParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getGtypDst(Map<String, Object> ortParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getGtypDst", ortParam);
	}
	
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 상세 목록 조회(메타데이터)
	 * @param ortParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubMetaOrtList(Map<String, Object> ortParam) {
		List<?> test = (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubMetaOrtList", ortParam);
		System.out.println(test);
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubMetaOrtList", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 수정
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMap5000NumOrtList(Map<String, Object> ortParam) {
		return update("managementDAO.updateAdjustSubMap5000NumOrtList", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 수정(메타데이터)
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMetaBaseOrt(Map<String, Object> ortParam) {
		return update("managementDAO.updateAdjustSubMetaBaseOrt", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 수정(식별정보)
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMetaOrtIdent(Map<String, Object> ortParam) {
		return update("managementDAO.updateAdjustSubMetaOrtIdent", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 수정
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMap5000NumOrtList_2(Map<String, Object> ortParam) {
		return update("managementDAO.updateAdjustSubMap5000NumOrtList_2", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 수정
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubMap5000NumOrtList_3(Map<String, Object> ortParam) {
		return update("managementDAO.updateAdjustSubMap5000NumOrtList_3", ortParam);
	}
	
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 수정
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int adjustSubGtypDstOrtList(Map<String, Object> ortParam) {
		return update("managementDAO.adjustSubGtypDstOrtList", ortParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS 기준국 관리 사업지구명 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectZoneNamGPS() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamGPS");
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS 기준국 관리 점의번호 조회
	 * @param gpsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectGpsBpIdn(Map<String, Object> gpsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectGpsBpIdn", gpsParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS 기준국 관리 목록 조회 페이징 카운트
	 * @param gpsParam
	 * @return int
	 * @throws Exception
	 */
	public int selectGpsListCnt(Map<String, Object> gpsParam) {
		return (Integer)selectByPk("managementDAO.selectGpsListCnt", gpsParam);
	}	
	/**
	 * 통합관리 - 사업지구 관리/GPS 기준국 관리 목록 조회
	 * @param gpsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectGpsList(Map<String, Object> gpsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectGpsList", gpsParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS기준국 수정
	 * @param gpsParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustGpsList(Map<String, Object> gpsParam) {
		return update("managementDAO.updateAdjustGpsList", gpsParam);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 사업연도 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectYearListLid() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectYearListLid");
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 사업지구명 조회
	 * @param lidParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectZoneNamLid(Map<String, Object> lidParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamLid", lidParam);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 자료 ID 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectLidarIdn(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectLidarIdn", zoneCode);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 보안등급 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectSecurityCodeLid() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSecurityCode");
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 목록 조회(상세목록 포함) 페이징 카운트
	 * @param lidParam
	 * @return int
	 * @throws Exception
	 */
	public int selectLidListCnt(Map<String, Object> lidParam) {
		return (Integer)selectByPk("managementDAO.selectLidListCnt", lidParam);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 목록 조회(상세목록 포함)
	 * @param lidParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> selectLidList(Map<String, Object> lidParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectLidList", lidParam);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 수정
	 * @param lidParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustLidList(Map<String, Object> lidParam) {
		return update("managementDAO.updateAdjustLidList", lidParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사업연도 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectYearListNir() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectYearListNir");
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사업지구명 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectZoneNamNir(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamNir", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 관리 코스번호 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectPhCourseNir(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhCourseNir", zoneCode);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사진 번호 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectPhNumNir(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhNumNir", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 해상도 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectResolutionNir(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectResolutionNir", NirParam);
	}	
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사진 주점 목록 조회 페이징 카운트
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	public int selectOrientmapNirListCnt(Map<String, Object> nirParam) {
		return (Integer)selectByPk("managementDAO.selectOrientmapNirListCnt", nirParam);
	}	
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사진 주점 목록 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectOrientmapNirList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectOrientmapNirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사진주점 상세 목록
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> selectSubOrientmapNirList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubOrientmapNirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사진주점 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public int updateAdjustOrientmapNir(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustOrientmapNir", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 목록 조회 페이징 카운트
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	public int selectProductNirListCnt(Map<String, Object> nirParam) {
		return (Integer)selectByPk("managementDAO.selectProductNirListCnt", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 목록 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectProductNirList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectProductNirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubProductNirList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubProductNirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 조회(외부표정요소)
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubProductEONirList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubProductEONirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 조회(메타데이터)
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubMetaNirList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubMetaNirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 수정(획득정보)
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustMetaNirmapAcqut(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustMetaNirmapAcqut", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 사진주점 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustNirOrientmapDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirOrientmapDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 수정(제약정보)
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustMetaNirmapContr(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustMetaNirmapContr", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustNirZoneDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirZoneDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 수정(메타데이터)
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustNirBasemetaDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirBasemetaDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 상세 목록 수정(식별정보)
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustMetaNirmapIdent(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustMetaNirmapIdent", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 목록 조회 페이징 카운트
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	public int selectNirNoteListCnt(Map<String, Object> nirParam) {
		return (Integer)selectByPk("managementDAO.selectNirNoteListCnt", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 목록 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectNirNoteList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectNirNoteList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 플름번호 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectFilmNumNir(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectFilmNumNir", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 상세 목록 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectSubNirNoteList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubNirNoteList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustNirNoteDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirNoteDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustNirCoursetestDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirCoursetestDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/NIR 성과 촬영기록부 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public int updateAdjustNirNotecourseDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirNotecourseDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/카메라정보 카메라 구분 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectNirCameraDts() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectNirCameraDts");
	}
	/**
	 * 통합관리 - NIR 관리/카메라정보 보유업체 조회
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectNirkeepCmpn() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectNirkeepCmpn");
	}
	/**
	 * 통합관리 - NIR 관리/카메라정보 목록 조회
	 * @param NirParam
	 * @return List
	 * @throws Exception
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })
	public List<?> selectNirCameraDtsList(Map<String, Object> NirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectNirCameraDtsList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/카메라정보 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustNirCameraDts(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustNirCameraDts", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과 수정
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustProductNirList(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustProductNirList", NirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과 수정(외부표정요소)
	 * @param NirParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustProductEONirList(Map<String, Object> NirParam) {
		return update("managementDAO.updateAdjustProductEONirList", NirParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 사업연도 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> getYearPts() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectYearPts");
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 사업지구명 조회
	 * @param ptsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getzoneNamPts(Map<String, Object> ptsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamPts", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 목록 조회 페이징 카운트
	 * @param ptsParam
	 * @return int
	 * @throws Exception
	 */
	public int getPtsListCnt(Map<String, Object> ptsParam) {
		return (Integer)selectByPk("managementDAO.selectPtsListCnt", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 목록 조회
	 * @param ptsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPtsList(Map<String, Object> ptsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPtsList", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 상세 목록 조회
	 * @param ptsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSubPtsList(Map<String, Object> ptsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectSubPtsList", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 수정
	 * @param ptsParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubPtsList(Map<String, Object> ptsParam) {
		return update("managementDAO.updateAdjustSubPtsList", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 점일련번호 조회
	 * @param ptsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPNum(Map<String, Object> ptsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPNum", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 목록 조회 페이징 카운트
	 * @param ptsParam
	 * @return int
	 * @throws Exception
	 */
	public int getPtsCoordListCnt(Map<String, Object> ptsParam) {
		return (Integer)selectByPk("managementDAO.selectPtsCoordListCnt", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 목록 조회
	 * @param ptsParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPtsCoordList(Map<String, Object> ptsParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPtsCoordList", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 수정
	 * @param ptsParam
	 * @return int
	 * @throws Exception
	 */
	public int updateAdjustSubPtsCoordList(Map<String, Object> ptsParam) {
		return update("managementDAO.updateAdjustSubPtsCoordList", ptsParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/사업지구 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertZone(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertZone", airParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/사업지구 삭제
	 * @param zoneCode
	 * @return int
	 * @throws Exception
	 */
	public int delZone(String zoneCode) {
		return delete("managementDAO.delZone", zoneCode);
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS기준국 등록
	 * @param gpsParam
	 * @return String
	 * @throws Exception
	 */
	public String insertGps(Map<String, Object> gpsParam) {
		return (String)insert("managementDAO.insertGps", gpsParam);
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS 기준국 관리 사업지구명 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> GpsListZoneNam() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectGpsListZoneNam");
	}
	/**
	 * 통합관리 - 사업지구 관리/GPS기준국 삭제
	 * @param gpsParam
	 * @return int
	 * @throws Exception
	 */
	public int delGps(Map<String, Object> gpsParam) {
		return delete("managementDAO.delGps", gpsParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 사업지구명 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> OrientmapZoneNam() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectOrientmapZoneNam");
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertOrientmap(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertOrientmap", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 코스번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> OrientmapPhCourse(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectOrientmapPhCourse", zoneCode);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 사진번호 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> OrientmapPhNum(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectOrientmapPhNum", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과관리 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertProductAirList(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertProductAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 등록(메타데이터)
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertMetaAirmapContr(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertMetaAirmapContr", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 등록(메타데이터)
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertAirBasemetaDts(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertAirBasemetaDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 등록(메타데이터)
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertMetaAirmapIdent(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertMetaAirmapIdent", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 관리 등록(외부표정요소)
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertProductEOAirList(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertProductEOAirList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 등록/촬영일자 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> insertphDate(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.insertphDate", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 등록/렌즈 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> insertlensNum() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.insertlensNum");
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 삭제
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int delOrient(Map<String, Object> airParam) {
		return delete("managementDAO.delOrient", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 사업지구명 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getZoneNamOrient(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamOrient", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 코스번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPhCourseOrient(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhCourseOrient", zoneCode);
	}
	/**
	 * 통합관리 - 항공사진 관리/사진주점 관리 사진번호 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPhNumOrient(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhNumOrient", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/성과 삭제
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int delProList(Map<String, Object> airParam) {
		return delete("managementDAO.delProList", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 관리 코스번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPhCourseCmr(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhCourseCmr", zoneCode);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 관리 사업지구명 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getzoneNamCmr(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamCmr", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertAirNoteDts(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertAirNoteDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertAirNotecourseDts(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertAirNotecourseDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertAirCoursetestDts(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertAirCoursetestDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 렌즈번호 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> getlensNum() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectlensNum");
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 삭제
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int delAirNote(Map<String, Object> airParam) {
		return delete("managementDAO.delAirNote", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라정보 등록
	 * @param airParam
	 * @return String
	 * @throws Exception
	 */
	public String insertAirCameraDts(Map<String, Object> airParam) {
		return (String)insert("managementDAO.insertAirCameraDts", airParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/카메라 정보 삭제
	 * @param airParam
	 * @return int
	 * @throws Exception
	 */
	public int delCmr(Map<String, Object> airParam) {
		return delete("managementDAO.delCmr", airParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 등록(메타데이터)
	 * @param demParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubGridIntDem(Map<String, Object> demParam) {
		return (String)insert("managementDAO.insertSubGridIntDem", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 등록(메타데이터)
	 * @param demParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMap5000BaseMeta(Map<String, Object> demParam) {
		return (String)insert("managementDAO.insertSubMap5000BaseMeta", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 상세 목록 등록
	 * @param demParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMap5000NumList(Map<String, Object> demParam) {
		
		insert("managementDAO.insertSubMap5000NumList", demParam);
		return (String)insert("managementDAO.insertSubGridIntDem", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 삭제
	 * @param demParam
	 * @return int
	 * @throws Exception
	 */
	public int getGridIntCnt(Map<String, Object> demParam) {
		return (Integer)selectByPk("managementDAO.getGridIntCnt", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 삭제
	 * @param demParam
	 * @return int
	 * @throws Exception
	 */
	public int delGridIntDem(Map<String, Object> demParam) {
		return delete("managementDAO.delGridIntDem", demParam);
	}
	/**
	 * 통합관리 - 수치표고 관리/수치표고 성과 삭제
	 * @param demParam
	 * @return int
	 * @throws Exception
	 */
	public int delMap5000(Map<String, Object> demParam) {
		return delete("managementDAO.delMap5000", demParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMap5000NumOrtList(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMap5000NumOrtList", ortParam);
		
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubGtypDstOrt(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubGtypDstOrt", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록(메타데이터)
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMetaOrtIdent(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMetaOrtIdent", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록(메타데이터)
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMetaBaseOrt(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMetaBaseOrt", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록(메타데이터)
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMap5000NumOrtList_3(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMap5000NumOrtList_3", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록(메타데이터)
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMap5000NumOrtList_2(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMap5000NumOrtList_2", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 삭제 이전 조회
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int getGtypDstCnt(Map<String, Object> airParam) {
		return (Integer)selectByPk("managementDAO.getGtypDstCnt", airParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 삭제 이전 조회
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int getExistToMetaOrtIdent(Map<String, Object> ortParam) {
		return (Integer)selectByPk("managementDAO.getExistToMetaOrtIdent", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 삭제
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int delGtypDstOrt(Map<String, Object> ortParam) {
		return delete("managementDAO.delGtypDstOrt", ortParam);
	}
	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 삭제
	 * @param ortParam
	 * @return int
	 * @throws Exception
	 */
	public int delMap5000Ort(Map<String, Object> ortParam) {
		delete("managementDAO.delGtypDstOrt", ortParam);
		return delete("managementDAO.delMap5000Ort", ortParam);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 등록
	 * @param lidParam
	 * @return String
	 * @throws Exception
	 */
	public String insertLidList(Map<String, Object> lidParam) {
		return (String)insert("managementDAO.insertLidList", lidParam);
	}
	/**
	 * 통합관리 - 라이다 관리/라이다 성과 삭제
	 * @param lidParam
	 * @return int
	 * @throws Exception
	 */
	public int delLid(Map<String, Object> lidParam) {
		return delete("managementDAO.delLid", lidParam);
	}
	/**
	 * 통합관리 - NIR 관리/사진주점 등록
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertOrientmapNir(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertOrientmapNir", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/사진주점 등록
	 * @return List
	 * @throws Exception
	 */
	public List<?> OrientmapNirZoneNam() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectOrientmapNirZoneNam");
	}
	/**
	 * 통합관리 - NIR 관리/성과 관리 등록(메타데이터)
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertNirBasemetaDts(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertNirBasemetaDts", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과 관리 등록(메타데이터)
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertMetaNirmapContr(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertMetaNirmapContr", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과 관리 등록(메타데이터)
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertMetaNirmapIdent(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertMetaNirmapIdent", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과 관리 등록(외부표정요소)
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertProductEONirList(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertProductEONirList", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과관리 등록
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertProductNirList(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertProductNirList", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/사진주점 삭제
	 * @param nirParam
	 * @return int
	 * @throws Exception
	 */
	public int delOrientNir(Map<String, Object> nirParam) {
		return delete("managementDAO.delOrientNir", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/성과 삭제
	 * @param nirParam
	 * @return int
	 * @throws Exception
	 */
	public int delProNirList(Map<String, Object> nirParam) {
		return delete("managementDAO.delProNirList", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 등록
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertNirNoteDts(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertNirNoteDts", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 등록
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertNirNotecourseDts(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertNirNotecourseDts", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 등록
	 * @param nirParam
	 * @return String
	 * @throws Exception
	 */
	public String insertNirCoursetestDts(Map<String, Object> nirParam) {
		return (String)insert("managementDAO.insertNirCoursetestDts", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 관리 사업지구명 조회
	 * @param nirParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getzoneNamNirCmr(Map<String, Object> nirParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNamNirCmr", nirParam);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 관리 코스번호 조회
	 * @param zoneCode
	 * @return List
	 * @throws Exception
	 */
	public List<?> getPhCourseNirCmr(String zoneCode) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectPhCourseNirCmr", zoneCode);
	}
	/**
	 * 통합관리 - NIR 관리/촬영기록부 삭제
	 * @param nirParam
	 * @return int
	 * @throws Exception
	 */
	public int delNirNote(Map<String, Object> nirParam) {
		return delete("managementDAO.delNirNote", nirParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 등록
	 * @param ptsParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubPtsList(Map<String, Object> ptsParam) {
		return (String)insert("managementDAO.insertSubPtsList", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/측량사업지구 삭제
	 * @param ptsParam
	 * @return int
	 * @throws Exception
	 */
	public int delPts(Map<String, Object> ptsParam) {
		return delete("managementDAO.delPts", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 등록
	 * @param ptsParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubPtsCoordList(Map<String, Object> ptsParam) {
		return (String)insert("managementDAO.insertSubPtsCoordList", ptsParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 삭제
	 * @param ptsParam
	 * @return int
	 * @throws Exception
	 */
	public int delPtsCoord(Map<String, Object> ptsParam) {
		return delete("managementDAO.delPtsCoord", ptsParam);
	}
	/**
	 * 통합관리 - 항공사진 관리/항공사진 사업지구명(연도별) 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> getZoneNam() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectZoneNam");
	}
	/**
	 * 통합관리 - 항공사진 관리/촬영기록부 등록 필름번호 조회
	 * @param airParam
	 * @return List
	 * @throws Exception
	 */
	public List<?> getFilmNumInsert(Map<String, Object> airParam) {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.selectFilmNumInsert", airParam);
	}
	/**
	 * 통합관리 - 측량조서 관리/지상기준점 측량조서 분류 조회
	 * @return List
	 * @throws Exception
	 */
	public List<?> getSurvCode() {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSurvCode");
	}

	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록(메타데이터)
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMetaOrtMait(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMetaOrtMait", ortParam);
	}

	/**
	 * 통합관리 - 정사영상 관리/정사영상 성과 등록(메타데이터)
	 * @param ortParam
	 * @return String
	 * @throws Exception
	 */
	public String insertSubMetaOrtDistr(Map<String, Object> ortParam) {
		return (String)insert("managementDAO.insertSubMetaOrtDistr", ortParam);		
	}

	/**
	 * 통합관리 - at성과 상세 조회
	 * @param sendMap
	 * @return
	 */
	@SuppressWarnings({ "deprecation", "unchecked" })	
	public List<?> getSubProductAtList(Map<String, Object> sendMap) throws Exception {
		return (List<?>) getSqlMapClientTemplate().queryForList("managementDAO.getSubProductAtList", sendMap);
	}
	
}